<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inits
current_level = -1;
current_boss_level = 0;
max_levels = 30; 
time = 0;
boss_counter = 3; //every x level a boss spawns
//Grid specs
grid_w = 64;
grid_h = 64;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level properties
//Monster ids are added at the end of the array (awkward but does the job)
//Level 0
level[0, 0] = 0; //Column 0 - Normal level or Boss Level  (0 or 1)
level[0, 1] = 20; //Column 1 - Room Width (multiplied by grid width later)
level[0, 2] = 20; //Column 2 - Room Height (multiplied by grid width later)
//level[0, 3] = 20; //Column 3 - Room Height Min (Multiplied by grid height later)
//level[0, 4] = 40; //Column 4 - Room Heigh Max (multiplied by grid height later)
level[0, 5] = 0; //Column 5 - Actual Room Width
level[0, 6] = 0; //Column 6 - Actual Room Height 
level[0, 7] = 10;//Column 7 - Minimum Number of Trees 
level[0, 8] = 20; //Column 8 - Maximum Number of Trees    
level[0, 9] = 0; //Column 9 - Actual Number of trees generated
level[0, 10] = 1; //Column 10 - Minimum Number of Enemies (per wave)
level[0, 11] = 2; //Column 11 - Maximum Number of Enemies (per wave)
level[0, 12] = 0; //Column 12 - Actual Number of Enemies
level[0, 13] = "0"; //Column 13 - Include Enemies (ids) (Includes bosses)
level[0, 14] = 1; //Column 14 - Number of Enemy Waves
level[0, 15] = 25; //Column 15 - Time between waves (seconds)
level[0, 16] = 13; //Column 16 - Minimum Number of Crystals
level[0, 17] = 16; //Column 17 - Maximum Number of Crystals
level[0, 18] = 0; //Column 18 - Actual Number of Crystals
level[0, 19] = bgm_forest_01; //Column 20 - Level Music
level[0, 20] = bga_forest_01; //Column 21 - Level Ambience

//Level 1
level[1, 0] = 0; //Column 0 - Normal level or Boss Level  (0 or 1)
level[1, 1] = 22; //Column 1 - Room Width (multiplied by grid width later)
level[1, 2] = 22; //Column 2 - Room Heigth (multiplied by grid width later)
//level[1, 3] = 20; //Column 3 - Room Height Min (Multiplied by grid height later)
//level[1, 4] = 30; //Column 4 - Room Heigh Max (multiplied by grid height later)
level[1, 5] = 0; //Column 5 - Actual Room Width
level[1, 6] = 0; //Column 6 - Actual Room Height 
level[1, 7] = 15;//Column 7 - Minimum Number of Trees 
level[1, 8] = 20; //Column 8 - Maximum Number of Trees    
level[1, 9] = 0; //Column 9 - Actual Number of trees generated
level[1, 10] = 2; //Column 10 - Minimum Number of Enemies (per wave)
level[1, 11] = 3; //Column 11 - Maximum Number of Enemies (per wave)
level[1, 12] = 0; //Column 12 - Actual Number of Enemies
level[1, 13] = "0"; //Column 13 - Include Enemies (ids) (Includes bosses)
level[1, 14] = 1; //Column 14 - Number of Enemy Waves
level[1, 15] = 3.5; //Column 15 - Time between waves (seconds)
level[1, 16] = 14; //Column 16 - Minimum Number of Crystals
level[1, 17] = 17; //Column 17 - Maximum Number of Crystals
level[1, 18] = 0; //Column 18 - Actual Number of Crystals
level[1, 19] = bgm_forest_01; //Column 20 - Level Music
level[1, 20] = bga_forest_01; //Column 21 - Level Ambience

//Level 2
level[2, 0] = 0; //Column 0 - Normal level or Boss Level  (0 or 1)
level[2, 1] = 24; //Column 1 - Room Width (multiplied by grid width later)
level[2, 2] = 24; //Column 2 - Room Heigth (multiplied by grid width later)
//level[2, 3] = 20; //Column 3 - Room Height Min (Multiplied by grid height later)
//level[2, 4] = 30; //Column 4 - Room Heigh Max (multiplied by grid height later)
level[2, 5] = 0; //Column 5 - Actual Room Width
level[2, 6] = 0; //Column 6 - Actual Room Height 
level[2, 7] = 20;//Column 7 - Minimum Number of Trees 
level[2, 8] = 30; //Column 8 - Maximum Number of Trees    
level[2, 9] = 0; //Column 9 - Actual Number of trees generated
level[2, 10] = 1; //Column 10 - Minimum Number of Enemies (per wave)
level[2, 11] = 2; //Column 11 - Maximum Number of Enemies (per wave)
level[2, 12] = 0; //Column 12 - Actual Number of Enemies
level[2, 13] = "0"; //Column 13 - Include Enemies (ids) (Includes bosses)
level[2, 14] = 2; //Column 14 - Number of Enemy Waves
level[2, 15] = 3.5; //Column 15 - Time between waves (seconds)
level[2, 16] = 15; //Column 16 - Minimum Number of Crystals
level[2, 17] = 18; //Column 17 - Maximum Number of Crystals
level[2, 18] = 0; //Column 18 - Actual Number of Crystals
level[2, 19] = bgm_forest_01; //Column 20 - Level Music
level[2, 20] = bga_forest_01; //Column 21 - Level Ambience

//Level 3
level[3, 0] = 0; //Column 0 - Normal level or Boss Level  (0 or 1)
level[3, 1] = 26; //Column 1 - Room Width (multiplied by grid width later)
level[3, 2] = 26; //Column 2 - Room Heigth (multiplied by grid width later)
//level[3, 3] = 20; //Column 3 - Room Height Min (Multiplied by grid height later)
//level[3, 4] = 30; //Column 4 - Room Heigh Max (multiplied by grid height later)
level[3, 5] = 0; //Column 5 - Actual Room Width
level[3, 6] = 0; //Column 6 - Actual Room Height 
level[3, 7] = 25;//Column 7 - Minimum Number of Trees 
level[3, 8] = 30; //Column 8 - Maximum Number of Trees    
level[3, 9] = 0; //Column 9 - Actual Number of trees generated
level[3, 10] = 1; //Column 10 - Minimum Number of Enemies (per wave)
level[3, 11] = 2; //Column 11 - Maximum Number of Enemies (per wave)
level[3, 12] = 0; //Column 12 - Actual Number of Enemies
level[3, 13] = "1,0"; //Column 13 - Include Enemies (ids) (Includes bosses)
level[3, 14] = 1; //Column 14 - Number of Enemy Waves
level[3, 15] = 3.5; //Column 15 - Time between waves (seconds)
level[3, 16] = 16; //Column 16 - Minimum Number of Crystals
level[3, 17] = 19; //Column 17 - Maximum Number of Crystals
level[3, 18] = 0; //Column 18 - Actual Number of Crystals
level[3, 19] = bgm_forest_01; //Column 20 - Level Music
level[3, 20] = bga_forest_01; //Column 21 - Level Ambience


//Level 4
level[4, 0] = 0; //Column 0 - Normal level or Boss Level  (0 or 1)
level[4, 1] = 28; //Column 1 - Room Width (multiplied by grid width later)
level[4, 2] = 28; //Column 2 - Room Heigth (multiplied by grid width later)
//level[4, 3] = 20; //Column 3 - Room Height Min (Multiplied by grid height later)
//level[4, 4] = 30; //Column 4 - Room Heigh Max (multiplied by grid height later)
level[4, 5] = 0; //Column 5 - Actual Room Width
level[4, 6] = 0; //Column 6 - Actual Room Height 
level[4, 7] = 30;//Column 7 - Minimum Number of Trees 
level[4, 8] = 40; //Column 8 - Maximum Number of Trees    
level[4, 9] = 0; //Column 9 - Actual Number of trees generated
level[4, 10] = 2; //Column 10 - Minimum Number of Enemies (per wave)
level[4, 11] = 3; //Column 11 - Maximum Number of Enemies (per wave)
level[4, 12] = 0; //Column 12 - Actual Number of Enemies
level[4, 13] = "1,0"; //Column 13 - Include Enemies (ids) (Includes bosses)
level[4, 14] = 1; //Column 14 - Number of Enemy Waves
level[4, 15] = 3.5; //Column 15 - Time between waves (seconds)
level[4, 16] = 16; //Column 16 - Minimum Number of Crystals
level[4, 17] = 19; //Column 17 - Maximum Number of Crystals
level[4, 18] = 0; //Column 18 - Actual Number of Crystals
level[4, 19] = bgm_forest_01; //Column 20 - Level Music
level[4, 20] = bga_forest_01; //Column 21 - Level Ambience

//Level 5
level[5, 0] = 1; //Column 0 - Normal level or Boss Level  (0 or 1)
level[5, 1] = 30; //Column 1 - Room Width (multiplied by grid width later)
level[5, 2] = 30; //Column 2 - Room Heigth (multiplied by grid width later)
//level[5, 3] = 20; //Column 3 - Room Height Min (Multiplied by grid height later)
//level[5, 4] = 30; //Column 4 - Room Heigh Max (multiplied by grid height later)
level[5, 5] = 0; //Column 5 - Actual Room Width
level[5, 6] = 0; //Column 6 - Actual Room Height 
level[5, 7] = 35;//Column 7 - Minimum Number of Trees 
level[5, 8] = 40; //Column 8 - Maximum Number of Trees    
level[5, 9] = 0; //Column 9 - Actual Number of trees generated
level[5, 10] = 1; //Column 10 - Minimum Number of Enemies (per wave)
level[5, 11] = 1; //Column 11 - Maximum Number of Enemies (per wave)
level[5, 12] = 0; //Column 12 - Actual Number of Enemies
level[5, 13] = "3"; //Column 13 - Include Enemies (ids) (Includes bosses)
level[5, 14] = 1; //Column 14 - Number of Enemy Waves
level[5, 15] = 3.5; //Column 15 - Time between waves (seconds)
level[5, 16] = 17; //Column 16 - Minimum Number of Crystals
level[5, 17] = 20; //Column 17 - Maximum Number of Crystals
level[5, 18] = 0; //Column 18 - Actual Number of Crystals
level[5, 19] = bgm_forest_01; //Column 20 - Level Music
level[5, 20] = bga_forest_01; //Column 21 - Level Ambience

//Level 6
level[6, 0] = 0; //Column 0 - Normal level or Boss Level  (0 or 1)
level[6, 1] = 32; //Column 1 - Room Width (multiplied by grid width later)
level[6, 2] = 32; //Column 2 - Room Heigth (multiplied by grid width later)
//level[6, 3] = 20; //Column 3 - Room Height Min (Multiplied by grid height later)
//level[6, 4] = 30; //Column 4 - Room Heigh Max (multiplied by grid height later)
level[6, 5] = 0; //Column 5 - Actual Room Width
level[6, 6] = 0; //Column 6 - Actual Room Height 
level[6, 7] = 40;//Column 7 - Minimum Number of Trees 
level[6, 8] = 50; //Column 8 - Maximum Number of Trees    
level[6, 9] = 0; //Column 9 - Actual Number of trees generated
level[6, 10] = 2; //Column 10 - Minimum Number of Enemies (per wave)
level[6, 11] = 3; //Column 11 - Maximum Number of Enemies (per wave)
level[6, 12] = 0; //Column 12 - Actual Number of Enemies
level[6, 13] = "1,0"; //Column 13 - Include Enemies (ids) (Includes bosses)
level[6, 14] = 2; //Column 14 - Number of Enemy Waves
level[6, 15] = 3.5; //Column 15 - Time between waves (seconds)
level[6, 16] = 18; //Column 16 - Minimum Number of Crystals
level[6, 17] = 21; //Column 17 - Maximum Number of Crystals
level[6, 18] = 0; //Column 18 - Actual Number of Crystals
level[6, 19] = bgm_forest_01; //Column 20 - Level Music
level[6, 20] = bga_forest_01; //Column 21 - Level Ambience

//Level 7
level[7, 0] = 0; //Column 0 - Normal level or Boss Level  (0 or 1)
level[7, 1] = 34; //Column 1 - Room Width (multiplied by grid width later)
level[7, 2] = 34; //Column 2 - Room Heigth (multiplied by grid width later)
//level[7, 3] = 20; //Column 3 - Room Height Min (Multiplied by grid height later)
//level[7, 4] = 30; //Column 4 - Room Heigh Max (multiplied by grid height later)
level[7, 5] = 0; //Column 5 - Actual Room Width
level[7, 6] = 0; //Column 6 - Actual Room Height 
level[7, 7] = 45;//Column 7 - Minimum Number of Trees 
level[7, 8] = 50; //Column 8 - Maximum Number of Trees    
level[7, 9] = 0; //Column 9 - Actual Number of trees generated
level[7, 10] = 2; //Column 10 - Minimum Number of Enemies (per wave)
level[7, 11] = 3; //Column 11 - Maximum Number of Enemies (per wave)
level[7, 12] = 0; //Column 12 - Actual Number of Enemies
level[7, 13] = "1,2"; //Column 13 - Include Enemies (ids) (Includes bosses)
level[7, 14] = 2; //Column 14 - Number of Enemy Waves
level[7, 15] = 3.5; //Column 15 - Time between waves (seconds)
level[7, 16] = 19; //Column 16 - Minimum Number of Crystals
level[7, 17] = 22; //Column 17 - Maximum Number of Crystals
level[7, 18] = 0; //Column 18 - Actual Number of Crystals
level[7, 19] = bgm_forest_01; //Column 20 - Level Music
level[7, 20] = bga_forest_01; //Column 21 - Level Ambience

//Level 8
level[8, 0] = 0; //Column 0 - Normal level or Boss Level  (0 or 1)
level[8, 1] = 36; //Column 1 - Room Width (multiplied by grid width later)
level[8, 2] = 36; //Column 2 - Room Heigth (multiplied by grid width later)
//level[8, 3] = 20; //Column 3 - Room Height Min (Multiplied by grid height later)
//level[8, 4] = 30; //Column 4 - Room Heigh Max (multiplied by grid height later)
level[8, 5] = 0; //Column 5 - Actual Room Width
level[8, 6] = 0; //Column 6 - Actual Room Height 
level[8, 7] = 55;//Column 7 - Minimum Number of Trees 
level[8, 8] = 60; //Column 8 - Maximum Number of Trees    
level[8, 9] = 0; //Column 9 - Actual Number of trees generated
level[8, 10] = 2; //Column 10 - Minimum Number of Enemies (per wave)
level[8, 11] = 3; //Column 11 - Maximum Number of Enemies (per wave)
level[8, 12] = 0; //Column 12 - Actual Number of Enemies
level[8, 13] = "1,2,0"; //Column 13 - Include Enemies (ids) (Includes bosses)
level[8, 14] = 3; //Column 14 - Number of Enemy Waves
level[8, 15] = 3.5; //Column 15 - Time between waves (seconds)
level[8, 16] = 21; //Column 16 - Minimum Number of Crystals
level[8, 17] = 24; //Column 17 - Maximum Number of Crystals
level[8, 18] = 0; //Column 18 - Actual Number of Crystals
level[8, 19] = bgm_forest_01; //Column 20 - Level Music
level[8, 20] = bga_forest_01; //Column 21 - Level Ambience

//Level 9
level[9, 0] = 1; //Column 0 - Normal level or Boss Level  (0 or 1)
level[9, 1] = 40; //Column 1 - Room Width (multiplied by grid width later)
level[9, 2] = 40; //Column 2 - Room Heigth (multiplied by grid width later)
//level[9, 3] = 20; //Column 3 - Room Height Min (Multiplied by grid height later)
//level[9, 4] = 30; //Column 4 - Room Heigh Max (multiplied by grid height later)
level[9, 5] = 0; //Column 5 - Actual Room Width
level[9, 6] = 0; //Column 6 - Actual Room Height 
level[9, 7] = 55;//Column 7 - Minimum Number of Trees 
level[9, 8] = 60; //Column 8 - Maximum Number of Trees    
level[9, 9] = 0; //Column 9 - Actual Number of trees generated
level[9, 10] = 1; //Column 10 - Minimum Number of Enemies (per wave)
level[9, 11] = 1; //Column 11 - Maximum Number of Enemies (per wave)
level[9, 12] = 0; //Column 12 - Actual Number of Enemies
level[9, 13] = "3"; //Column 13 - Include Enemies (ids) (Includes bosses)
level[9, 14] = 1; //Column 14 - Number of Enemy Waves
level[9, 15] = 3.5; //Column 15 - Time between waves (seconds)
level[9, 16] = 22; //Column 16 - Minimum Number of Crystals
level[9, 17] = 25; //Column 17 - Maximum Number of Crystals
level[9, 18] = 0; //Column 18 - Actual Number of Crystals
level[9, 19] = bgm_forest_01; //Column 20 - Level Music
level[9, 20] = bga_forest_01; //Column 21 - Level Ambience

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Boss Level properties

//Column 0 - Minimum Number of Trees
//Column 1 - Maximum Number of Trees
//Column 2 - Actual number of trees generated
//Column 3 - Number of Crystals
//Column 4 - Boss id
//Column 5 - Minimum number of crystals
//Column 6 - Maximum number of crystals
boss_level = 0;
boss_level[0, 0] = 10;
boss_level[0, 1] = 20;
boss_level[0, 2] = 0;
boss_level[0, 3] = 10;
boss_level[0, 4] = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Arrow Types
//Column 0 - Arrow Minimum Damage
//Column 1 - Arrow Maximum Damage
//Column 2 - Light Colour
//Column 3 - Light Size
//Column 4 - Arrow Sprite
//Column 5 - Crystal Sprite
//Column 6 - Arrow Stuck Vertical Sprite
//Column 7 - Arrow Shoot sound
//Column 8 - Arrow Hit Sound
//Column 9 - Arrow Name
//Column 10 - Light Flicker Amount 

//Normal Arrow - 0
//Fire Arrow - 1
//Magic Arrow - 2

//Normal Arrow
arrow[0, 0] = 1;
arrow[0, 1] = 3;
arrow[0, 2] = c_white;
arrow[0, 3] = 0;
arrow[0, 4] = spr_arrow;
arrow[0, 6] = spr_arrow_stuck_vertical;
arrow[0, 7] = snd_bow_shoot;
arrow[0, 8] = snd_bow_hit;
arrow[0, 9] = "Arrow";
arrow[0, 10] = 0;
//Fire Arrow
arrow[1, 0] = 2;
arrow[1, 1] = 4;
arrow[1, 2] = make_color_rgb(89,35,13);
arrow[1, 3] = 1;
arrow[1, 4] = spr_arrow_fire;
arrow[1, 5] = spr_crystal_fire;
arrow[1, 6] = spr_arrow_stuck_vertical_fire;
arrow[1, 7] = snd_bow_shoot;
arrow[1, 8] = snd_bow_hit;
arrow[1, 9] = "Fire Arrow";
arrow[1, 10] = 10;
//Magic Arrow
arrow[2, 0] = 1;
arrow[2, 1] = 3;
arrow[2, 2] = c_purple;
arrow[2, 3] = 2;
arrow[2, 4] = spr_arrow_magic;
arrow[2, 5] = spr_crystal_magic;
arrow[2, 6] = spr_arrow_stuck_vertical_magic;
arrow[2, 7] = snd_bow_shoot;
arrow[2, 8] = snd_bow_hit;
arrow[2, 9] = "Magic Arrow";
arrow[2, 10] = 10;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Monster Types

//Spider
monster[0, 0] = 5; //Column 0 - Movement Speed
monster[0, 1] = 3; //Column 1 - Health
monster[0, 2] = 1; //Column 2 - Base Damage 
monster[0, 3] = 32; //Column 3 - Range
monster[0, 4] = 0.5; //Column 4 - Pathfinding Updater
monster[0, 5] = spr_spider_run; //Column 5 - Run Sprite
monster[0, 6] = spr_spider_windup; //Column 6 - Windup Sprite
monster[0, 7] = spr_spider_windown; //Column 7 - Windown Sprite
monster[0, 8] = spr_spider_idle; //Column 8 - Idle Sprite
monster[0, 9] = spr_spider_death; //Column 9 - Death Sprite
monster[0, 10] = 0.15; //Column 10 - Windup Time (Seconds)
monster[0, 11] = 0.20; //Column 11 - Windown Time (Seconds)
monster[0, 12] = 0; //Column 12 - Default Projectile
monster[0, 13] = false; //Column 13 - Boss or not


//Snake
monster[1, 0] = 6; //Column 0 - Movement Speed
monster[1, 1] = 3; //Column 1 - Health
monster[1, 2] = 3; //Column 2 - Base Damage 
monster[1, 3] = 200; //Column 3 - Range
monster[1, 4] = 0.5; //Column 4 - Pathfinding Updater
monster[1, 5] = spr_snake_run; //Column 5 - Run Sprite
monster[1, 6] = spr_snake_windup; //Column 6 - Windup Sprite
monster[1, 7] = spr_snake_windown; //Column 7 - Windown Sprite
monster[1, 8] = spr_snake_idle; //Column 8 - Idle Sprite
monster[1, 9] = spr_snake_death; //Column 9 - Death Sprite
monster[1, 10] = 0.15; //Column 10 - Windup Time (Seconds)
monster[1, 11] = 0.25; //Column 11 - Windown Time (Seconds)
monster[1, 12] = 1; //Column 12 - Default Projectile
monster[1, 13] = false; //Column 13 - Boss or not

//Dog
monster[2, 0] = 7; //Column 0 - Movement Speed
monster[2, 1] = 3; //Column 1 - Health
monster[2, 2] = 2; //Column 2 - Base Damage 
monster[2, 3] = 32; //Column 3 - Range
monster[2, 4] = 0.5; //Column 4 - Pathfinding Updater
monster[2, 5] = spr_dog_run; //Column 5 - Run Sprite
monster[2, 6] = spr_dog_windup; //Column 6 - Windup Sprite
monster[2, 7] = spr_dog_windown; //Column 7 - Windown Sprite
monster[2, 8] = spr_dog_idle; //Column 8 - Idle Sprite
monster[2, 9] = spr_dog_death; //Column 9 - Death Sprite
monster[2, 10] = 0.10; //Column 10 - Windup Time (Seconds)
monster[2, 11] = 0.15; //Column 11 - Windown Time (Seconds)
monster[2, 12] = 0; // Column 12 - Default Projectile
monster[2, 13] = false; //Column 13 - Boss or not

//Shadow
monster[3, 0] = 4.5; //Column 0 - Movement Speed
monster[3, 1] = 45; //Column 1 - Health
monster[3, 2] = 3; //Column 2 Base Damage
monster[3, 3] = 400; //Column 3 - Range
monster[3, 4] = 0.5; //Column 4 - Pathfinding Updater (Seconds)
monster[3, 5] = spr_shadow_run;  //Column 5 - Run Sprite
monster[3, 6] = spr_shadow_draw; //Column 6 - Windup Sprite
monster[3, 7] = spr_shadow_idle; //Column 7 - Windown Sprite
monster[3, 8] = spr_shadow_idle; //Column 8 - Idle Sprite
monster[3, 9] = spr_shadow_death; //Column 9 - Death Sprite
monster[3, 10] = 0.45; //Column 10 - Windup Time (Seconds)
monster[3, 11] = 0.35; //Column 11 - Windown Time (Seconds)
monster[3, 12] = 2; //Column 12 - Default Projectile
monster[3, 13] = true; //Column 13 - Boss or not
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Boss Types
//Column 0 - Movement Speed
//Column 1 - Health
//Column 2 - Base Damage
//Column 3 - Range
//Column 4 - Pathfinding Updater
//Column 5 - Run Sprite
//Column 6 - Windup Sprite
//Column 7 - Windown Sprite
//Column 8 - Idle Sprite
//Column 9 - Death Sprite
//Column 10 - Windup Time
//Column 11 - Windown Time
//Column 12 - Projectile


//Boss 1 - Shadow

//Shadow
boss[0, 0] = 9;
boss[0, 1] = 30;
boss[0, 2] = 3;
boss[0, 3] = 550;
boss[0, 4] = 0.5; //How fast the onster mshould update chasing
boss[0, 5] = spr_shadow_run; 
boss[0, 6] = spr_shadow_draw;
boss[0, 7] = spr_shadow_draw;
boss[0, 8] = spr_shadow_idle;
boss[0, 9] = spr_spider_death;
boss[0, 10] = 0.45;
boss[0, 11] = 0.35;
boss[0, 12] = 2;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Projectiles
//0 Damage
//1 Speed
//2 Sprite Shoot
//3 Sprite Destroy
//4 Sound on shoot
//5 Sound on hit
//6 Range
//7 LIght Size
//8 Light Color
//9 Name

//Default arrow
projectile[0, 0] = 2;
projectile[0, 1] = 10;
projectile[0, 2] = spr_arrow;
projectile[0, 3] = spr_placeholder;
projectile[0, 4] = snd_bow_shoot;
projectile[0, 5] = snd_bow_hit;
projectile[0, 6] = 1000;
projectile[0, 7] = 0;
projectile[0, 8] = 0;
projectile[0, 9] = "arrow";
projectile[0, 10] = scr_placeholder_hit; //hit script

//Acid ball
projectile[1, 0] = 2;
projectile[1, 1] = 8;
projectile[1, 2] = spr_acid_ball;
projectile[1, 3] = spr_placeholder;
projectile[1, 4] = snd_bow_shoot;
projectile[1, 5] = snd_bow_hit;
projectile[1, 6] = 1000;
projectile[1, 7] = 0;
projectile[1, 8] = c_white;
projectile[1, 9] = "acid ball";
projectile[1, 10] = scr_placeholder_hit; //hit script

//Shadow Arrow
projectile[2, 0] = 5;
projectile[2, 1] = 12;
projectile[2, 2] = spr_arrow_shadow;
projectile[2, 3] = spr_placeholder;
projectile[2, 4] = snd_bow_shoot;
projectile[2, 5] = snd_bow_hit;
projectile[2, 6] = 1000;
projectile[2, 7] = 128;
projectile[2, 8] = c_white;
projectile[2, 9] = "shadow arrow";
projectile[2, 10] = scr_shadow_arrow_hit; //hit script
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Next Level Data Gen
//Generate data for the next level as long as it exists

if (current_level+1 &lt;= array_height_2d(obj_game_control.level))
{
    
}
/*
if (current_level+1 == array_height_2d(obj_game_control.level))
{
level[current_level+1, 0] = irandom_range(base_tree,low_tree);//min trees
level[current_level+1, 1] = irandom_range(low_tree,high_tree); //max trees
level[current_level+1, 2] = 0; //actual trees
level[current_level+1, 3] = irandom_range(base_enemy,low_enemy);// min enemies
level[current_level+1, 4] = irandom_range(low_enemy,high_enemy); //max enemies
level[current_level+1, 5] = 0; //actual enemies
level[current_level+1, 6] = irandom_range(1,3); //enemy waves
level[current_level+1, 7] = irandom_range(1,10); //time (seconds) between waves
level[current_level+1, 8] = irandom_range(8,18); //nr of crystals;
//Manually changed, need to think of solution
level[current_level+1, 9] = "0 1 2"; //How many diff types of enemies in the room
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Time Moving
if (room==asset_get_index("rm_01") || room==asset_get_index("rm_02"))
time+=1/room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
