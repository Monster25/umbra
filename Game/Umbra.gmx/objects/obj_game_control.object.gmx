<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inits
current_level = 0;
max_levels = 10; 
time = 0;
//Tree gen
base_tree = 10 //for random generation
low_tree = 15; //for random generation
high_tree = 30; //for random generation
//Enemy gen
base_enemy = 4 //for random gen
low_enemy = 7 //for random gen
high_enemy = 10 //for random gen

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level properties

//Column 0 - Minimum Number of Trees
//Column 1 - Maximum Number of Trees
//Column 2 - Actual number of trees generated
//Column 3 - Minimum Number of Enemies
//Column 4 - Maximum Number of Enemies
//Column 5 - Actual number of Enemies
//Column 6 - Waves of enemies
//Column 7 - Time (Seconds) between each wave
//Column 8 - Number of Crystals
//Column 9 - Types of enemies
//Level 1
level[0, 0] = 10;
level[0, 1] = 20;
level[0, 2] = 0;
level[0, 3] = 1;
level[0, 4] = 1;
level[0, 5] = 0;
level[0, 6] = 1;
level[0, 7] = 5; 
level[0, 8] = 10;
//level[0, 9] = 3;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Arrow Types
//Column 0 - Arrow Minimum Damage
//Column 1 - Arrow Maximum Damage
//Column 2 - Light Colour
//Column 3 - Light Size
//Column 4 - Arrow Sprite
//Column 5 - Crystal Sprite
//Column 6 - Arrow Stuck Vertical Sprite
//Column 7 - Arrow Shoot sound
//Column 8 - Arrow Hit Sound
//Column 9 - Arrow Name

//Normal Arrow - 0
//Fire Arrow - 1
//Magic Arrow - 2

//Normal Arrow
arrow[0, 0] = 1;
arrow[0, 1] = 3;
arrow[0, 2] = c_white;
arrow[0, 3] = 0;
arrow[0, 4] = spr_arrow;
arrow[0, 6] = spr_arrow_stuck_vertical;
arrow[0, 7] = snd_bow_shoot;
arrow[0, 8] = snd_bow_hit;
arrow[0, 9] = "Arrow";
//Fire Arrow
arrow[1, 0] = 2;
arrow[1, 1] = 4;
arrow[1, 2] = c_orange;
arrow[1, 3] = 64;
arrow[1, 4] = spr_arrow_fire;
arrow[1, 5] = spr_crystal_fire;
arrow[1, 6] = spr_arrow_stuck_vertical_fire;
arrow[1, 7] = snd_bow_shoot;
arrow[1, 8] = snd_bow_hit;
arrow[1, 9] = "Fire Arrow";
//Magic Arrow
arrow[2, 0] = 1;
arrow[2, 1] = 3;
arrow[2, 2] = c_purple;
arrow[2, 3] = 128;
arrow[2, 4] = spr_arrow_magic;
arrow[2, 5] = spr_crystal_magic;
arrow[2, 6] = spr_arrow_stuck_vertical_magic;
arrow[2, 7] = snd_bow_shoot;
arrow[2, 8] = snd_bow_hit;
arrow[2, 9] = "Magic Arrow";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Monster Types
//Column 0 - Movement Speed
//Column 1 - Health
//Column 2 - Damage
//Column 3 - Attack Cooldown
//Column 4 - Range
//Column 5 - Pathfinding Updater
//Column 6 - Walking Sprite
//Column 7 - Windup Sprite
//Column 8 - Windown Sprite
//Column 9 - Windup Time
//Column 10 - Windown Time
//Column 11 - Projectile

//Melee Monster 1 - 0
//Melee Monster 2 - 1
//Ranged Monster - 2

//Spider
monster[0, 0] = 4;
monster[0, 1] = 3;
monster[0, 2] = 1;
monster[0, 3] = 1;
monster[0, 4] = 32;
monster[0, 5] = 0.5; //How fast the onster mshould update chasing
monster[0, 6] = spr_monster_01;
monster[0, 7] = spr_monster_01;
monster[0, 8] = spr_monster_01;
monster[0, 9] = 0.25;
monster[0, 10] = 0.45;
monster[0, 11] = 0;

//Snake
monster[1, 0] = 4;
monster[1, 1] = 3;
monster[1, 2] = 3;
monster[1, 3] = 1;
monster[1, 4] = 200;
monster[1, 5] = 0.5;
monster[1, 6] = spr_monster_02;
monster[1, 7] = spr_monster_02;
monster[1, 8] = spr_monster_02;
monster[1, 9] = 0.10;
monster[1, 10] = 0.70;
monster[1, 11] = 1;

//Dog
monster[2, 0] = 3;
monster[2, 1] = 3;
monster[2, 2] = 2;
monster[2, 3] = 2;
monster[2, 4] = 670;
monster[2, 5] = 0.5;
monster[2, 6] = spr_monster_03;
monster[2, 7] = spr_monster_03;
monster[2, 8] = spr_monster_03;
monster[2, 9] = 0.45;
monster[2, 10] = 0.55;
monster[2, 11] = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Projectiles
//0 Damage
//1 Speed
//2 Sprite Shoot
//3 Sprite Destroy
//4 Sound on shoot
//5 Sound on hit
//6 Range
//7 LIght Size
//8 Light Color
//9 Name
projectile[0, 0] = 2;
projectile[0, 1] = 10;
projectile[0, 2] = spr_arrow;
projectile[0, 3] = spr_placeholder;
projectile[0, 4] = snd_bow_shoot;
projectile[0, 5] = snd_bow_hit;
projectile[0, 6] = 1000;
projectile[0, 7] = 0;
projectile[0, 8] = 0;
projectile[0, 9] = "arrow";

//Acid ball
projectile[1, 0] = 2;
projectile[1, 1] = 12;
projectile[1, 2] = spr_acid_ball;
projectile[1, 3] = spr_placeholder;
projectile[1, 4] = snd_bow_shoot;
projectile[1, 5] = snd_bow_hit;
projectile[1, 6] = 1000;
projectile[1, 7] = 0;
projectile[1, 8] = c_white;
projectile[1, 9] = "acid ball";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level Generation
//if you run out of custom levels, generate new ones
if (current_level+1 == array_height_2d(obj_game_control.level))
{
level[current_level+1, 0] = irandom_range(base_tree,low_tree);//min trees
level[current_level+1, 1] = irandom_range(low_tree,high_tree); //max trees
level[current_level+1, 2] = 0; //actual trees
level[current_level+1, 3] = irandom_range(base_enemy,low_enemy);// min enemies
level[current_level+1, 4] = irandom_range(low_enemy,high_enemy); //max enemies
level[current_level+1, 5] = 0; //actual enemies
level[current_level+1, 6] = irandom_range(1,3); //enemy waves
level[current_level+1, 7] = irandom_range(1,10); //time (seconds) between waves
level[current_level+1, 8] = irandom_range(8,18); //nr of crystals;
//level[current_level+1, 9] = irandom_range(1,obj_game_control.array_height_2d(monster)); //How many diff types of enemies in the room

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Time Moving
if (room!=3 &amp;&amp; room!=0)
time+=1/room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
